---
layout: post
title:  "Well Architected Kubernetes - Objects"
date:   2021-05-24 10:50:01 +0530
categories: kubernetes architecture
author: coolsvap
permalink: /well-architected-kubernetes-objects-001
---
#Kubernetes Objects

While working with [Kubernetes][0] the most important thing we need to understand is Kubernetes Objects. By definition, Kubernetes objects are persistent entities in the Kubernetes system. Kubernetes uses these entities to represent the state of your cluster. The objects include things like
- State of your application
- Application Resources
- Policies
- Default, Autogenerated Metadata

It also serves as ```record of intent``` for your Kubernetes cluster. By creating an object you are effectively telling Kubernetes system what you want to do on your Kubernetes cluster, what your application workload would look like, what is it's ```desired``` state, etc. You can operate on Kubernetes objects with [Kubernetes API][1]  and it can be operated with any client of your preference, the most common being ```kubectl``` command line client.


Every Kubernetes object includes minimum two nested fields that govern the object's configuration: 
- the object ```spec```, is a user defined characteristics you want the object to have, its desired state, etc
- the object ```status```, is an autogenerated current state of the object and managed by the Kubernetes system

When creating any Kubernetes object, following fields are required to be set,
- ```apiVersion``` - Which version of the Kubernetes API you're using to create this object
- ```kind``` - What kind of object you want to create
- ```metadata``` - Data that helps uniquely identify the object, including a name string, UID, and optional namespace
```spec``` - What state you desire for the object


References:

[Kubernetes Documentation](https://kubernetes.io/docs)

[0]: https://kubernetes.io/
[1]: https://kubernetes.io/docs/concepts/overview/kubernetes-api/